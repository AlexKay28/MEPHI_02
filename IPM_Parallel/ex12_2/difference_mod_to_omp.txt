7c7
< //  Simple iterations, MPI
---
> //  Simple iterations, MPI + OpenMP
14c14,15
< #include "mpi.h"
---
> #include <mpi.h>
> #include <omp.h>
18a20,24
> // Thread objects:
> 
> int nth=1, nth_max=1;
> omp_lock_t writelock;
> 
23c29
< char sname[14] = "ex12a_mod.p00";
---
> char sname[14] = "ex12a_omp.p00";
37a44
> double *dd, *ee, *y4, *y5; 
50c57
< int MyJob();
---
> int MyJob(int nt, int mt);
52,55c59,62
< int prog_right_mpi(int np, int mp, int nc,
<                    double *aa, double *bb, double *cc, double *ff,
<                    double *al, double *y1, double *y2, double *y3,
<                    double *y4, double *dd, double *ee);
---
> int prog_right_mpi_omp(int np, int mp, int nt, int mt, int nc,
>                        double *aa, double *bb, double *cc, double *ff,
>                        double *al, double *y1, double *y2, double *y3,
>                        double *y4, double *dd, double *ee);
96c103,106
<   fprintf(stderr,"Netsize: %d, process: %d, system: %s, tick=%12le\n",np,mp,pname,tick);
---
>   nth_max = omp_get_max_threads();
> 
>   fprintf(stderr,"Netsize: %d, process: %d, system: %s, max_thr: %d, tick=%12le\n",
>     np, mp, pname, nth_max, tick);
105c115
<     ier = fopen_m(&Fi,"ex12a_mod.d","rt");
---
>     ier = fopen_m(&Fi,"ex12a_omp.d","rt");
121c131,134
<     if (argc>2) sscanf(argv[2],"%d",&lp);
---
>     if (argc>2) sscanf(argv[2],"%d",&nth);
>     if (argc>3) sscanf(argv[3],"%d",&lp);
> 
>     if (nth<1) nth = 1;
134a148
>       buf.idata[15] = nth;
148a163
>       nth = buf.idata[15];
154,155c169,170
<   fprintf(Fo,"Netsize: %d, process: %d, system: %s, tick=%12le\n",
<     np,mp,pname,tick);
---
>   fprintf(Fo,"Netsize: %d, process: %d, system: %s, max_thr: %d, thr: %d, tick=%12le\n",
>     np, mp, pname, nth_max, nth, tick);
172c187,206
<   myrc = MyJob();
---
> // Parallelizm init:
> 
>   omp_set_num_threads(nth);
> 
>   omp_init_lock(&writelock);
> 
> // Parallel:
> 
>   #pragma omp parallel
>   {
>     int nt = omp_get_max_threads();
>     int mt = omp_get_thread_num();
>     int rc = MyJob(nt, mt);
>     if (rc!=0) myrc = rc;
>     if (lp>0) fprintf(stderr,"[%d,%d] rc=%d\n", mp, mt, rc);
>   } // end parallel
> 
> // Parallelizm destroy:
> 
>   omp_destroy_lock(&writelock);
178c212,215
<   if (mp==0) fprintf(stderr,"np=%d nx=%d it=%d rc=%d time=%le dmax=%le\n",np,nx,it,myrc,t1,dm);
---
>   {
>     int nn = np*nth;
> 
>     if (mp==0) fprintf(stderr,"nn=%d np=%d nt=%d nx=%d it=%d rc=%d time=%le dmax=%le\n",nn,np,nth,nx,it,myrc,t1,dm);
180c217,218
<   fprintf(Fo,"\nnp=%d nx=%d it=%d rc=%d time=%le dmax=%le\n",np,nx,it,myrc,t1,dm);
---
>     fprintf(Fo,"\nnn=%d np=%d nt=%d nx=%d it=%d rc=%d time=%le dmax=%le\n",nn,np,nth,nx,it,myrc,t1,dm);
>   }
191c229
< int MyJob()
---
> int MyJob(int nt, int mt)
193,196c231,233
<   int i, j, i1, i2, nc, ncm, ncp, ncx;
< 
<   double s0, s1, s2, y0_s, y0_l, y0_r, y0_m, y0_p;
<   double *xx, *aa, *bb, *cc, *dd, *ee, *ff, *al, *y0, *y1, *y2, *y3, *y4;
---
>   int i, j, i1, i2, nn, mm, nc, ncm, ncp, ncx;
>   double s0, s1, s2, s3, s4, y0_s, y0_l, y0_r, y0_m, y0_p;
>   double *xx, *aa, *bb, *cc, *ff, *al, *y0, *y1, *y2, *y3;
200c237,240
<   if (nx < 3*np) {
---
>   nn = np*nt;
>   mm = nt*mp + mt;
> 
>   if (nx < 3*nn) {
204c244
<   MyRange(np,mp,0,nx,&i1,&i2,&nc);
---
>   MyRange(nn,mm,0,nx,&i1,&i2,&nc);
207c247
<   ncp = 2*(np-1);
---
>   ncp = 2*(nn-1);
212c252
<   if (lp>0) fprintf(stderr,"[%d] np=%d i1=%d i2=%d nc=%d\n",mp,np,i1,i2,nc);
---
>   if (lp>0) fprintf(stderr,"[%d,%d] np=%d nt=%d nn=%d mm=%d i1=%d i2=%d nc=%d\n",mp,mt,np,nt,nn,mm,i1,i2,nc);
214c254,256
<   fprintf(Fo,"i1=%d i2=%d nc=%d\n",i1,i2,nc);
---
>   omp_set_lock(&writelock);
>   fprintf(Fo,"[%d,%d] np=%d nt=%d nn=%d mm=%d i1=%d i2=%d nc=%d\n",mp,mt,np,nt,nn,mm,i1,i2,nc);
>   omp_unset_lock(&writelock);
228c270
<   if (np>1) {
---
>   if (nn>1) {
231,233c273,279
<     y4 = (double*)(malloc(sizeof(double)*ncp));
<     dd = (double*)(malloc(sizeof(double)*4*ncp));
<     ee = (double*)(malloc(sizeof(double)*4*ncp));
---
> 
>     if (mt==0) {
>       y4 = (double*)(malloc(sizeof(double)*ncp));
>       dd = (double*)(malloc(sizeof(double)*4*ncp));
>       ee = (double*)(malloc(sizeof(double)*4*ncp));
>       y5 = (double*)(malloc(sizeof(double)*(2*nt+2)));
>     }
244c290
<   it = 0;
---
>   if (mt==0) it = 0;
257,259c303,325
<     if (np>1) {
<       y0_l = y0[0];
<       y0_r = y0[ncm];
---
>     if (nn>1) {
>       #pragma omp barrier
>       if (mt==0) for (i=0; i<2*nt+2; i++) y5[i] = 0.0;
>       #pragma omp barrier
> 
>       y5[2*mt+1] = y0[0];
>       y5[2*mt+2] = y0[ncm];
> 
>       #pragma omp barrier
> 
>       if (mt==0) {
>         s2 = 0.0;
>         s4 = 0.0;
> 
>         if (np>1) {
>           s1 = y5[1];
>           s3 = y5[2*nt];
>           BndExch1D(np,mp,1,1,1,1,&s1,&s2,&s3,&s4);
>         }
> 
>         y5[0]      = s2;
>         y5[2*nt+1] = s4;
>       }
261c327,330
<       BndExch1D(np,mp,1,1,1,1,&y0_l,&y0_m,&y0_r,&y0_p);
---
>       #pragma omp barrier
> 
>       y0_m = y5[2*mt];
>       y0_p = y5[2*mt+3];
266c335
<     if (mp==0) {
---
>     if (mm==0) {
301c370
<     if (mp==np-1) {
---
>     if (mm==nn-1) {
322a392,393
>     if (mt == 0) rka = 0.0;
> 
338c409
<     if (np<2) {
---
>     if (nn<2) {
342c413,425
<       MPI_Allreduce(&s0,&rka,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD);
---
>       #pragma omp barrier
>       omp_set_lock(&writelock);
>       if (rka<s0) rka = s0;
>       omp_unset_lock(&writelock);
>       #pragma omp barrier
> 
>       if (mt==0) {
>         if (np>1) {
>           s0 = rka;
>           MPI_Allreduce(&s0,&rka,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD);
>         }
>       }
>       #pragma omp barrier
348c431,433
<       if (mp==0) fprintf(stderr,"it=%d rka=%le\n",it,rka);
---
>       fprintf(stderr,"[%d,%d] it=%d rka=%le\n",mp,mt,it,rka);
>       if (mt==0) fprintf(Fo,"\nit=%d rka=%le\n",it,rka);
>     }
350c435,436
<       fprintf(Fo,"\nit=%d rka=%le\n",it,rka);
---
>     if (nn>1) {
>       #pragma omp barrier
357c443
<     it++;
---
>     if (mt==0) it++;
361a448
>       omp_set_lock(&writelock);
365a453
>       omp_unset_lock(&writelock);
370c458
<     if (np<2) {
---
>     if (nn<2) {
374c462,471
<       i = prog_right_mpi(np,mp,nc,aa,bb,cc,ff,al,y1,y2,y3,y4,dd,ee);
---
>       #pragma omp barrier
> 
>       if (nt<2) {
>         i = prog_rightp(np,mp,nc,aa,bb,cc,ff,al,y1,y2,y3,y4,dd,ee);
>       }
>       else {
>         i = prog_right_mpi_omp(np,mp,nt,mt,nc,aa,bb,cc,ff,al,y1,y2,y3,y4,dd,ee);
>       }
> 
>       #pragma omp barrier
383a481
>       omp_set_lock(&writelock);
387a486
>       omp_unset_lock(&writelock);
396a496
>     omp_set_lock(&writelock);
404a505
>     omp_unset_lock(&writelock);
408a510,511
>   if (mt == 0) dm = 0.0;
> 
417c520
<   if (np<2) {
---
>   if (nn<2) {
421c524,536
<     MPI_Allreduce(&s0,&dm,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD);
---
>     #pragma omp barrier
>     omp_set_lock(&writelock);
>     if (dm<s0) dm = s0;
>     omp_unset_lock(&writelock);
>     #pragma omp barrier
> 
>     if (mt==0) {
>       if (np>1) {
>         s0 = dm;
>         MPI_Allreduce(&s0,&dm,1,MPI_DOUBLE,MPI_MAX,MPI_COMM_WORLD);
>       }
>     }
>     #pragma omp barrier
429c544
< // Parallel variant, MPI:
---
> // Parallel variant, MPI + OpenMP:
431,434c546,549
< int prog_right_mpi(int np, int mp, int nc,
<                    double *aa, double *bb, double *cc, double *ff,
<                    double *al, double *y1, double *y2, double *y3,
<                    double *y4, double *dd, double *ee)
---
> int prog_right_mpi_omp(int np, int mp, int nt, int mt, int nc,
>                        double *aa, double *bb, double *cc, double *ff,
>                        double *al, double *y1, double *y2, double *y3,
>                        double *y4, double *dd, double *ee)
436c551
<   int i, j, ncm, ncp;
---
>   int i, j, nn, mm, ncm, ncp;
440a556,558
>   nn = np*nt;
>   mm = nt*mp + mt;
> 
442c560
<   ncp = 2*np-2;
---
>   ncp = 2*nn-2;
444,445c562,565
<   for (i=0; i<4*ncp; i++) dd[i] = 0;
<   for (i=0; i<4*ncp; i++) ee[i] = 0;
---
>   if (mt==0) {
>     for (i=0; i<4*ncp; i++) dd[i] = 0;
>     for (i=0; i<4*ncp; i++) ee[i] = 0;
>   }
461c581
<   if (mp==0) {
---
>   if (mm==0) {
469c589
<       fprintf(stderr,"[%d] y1: rc=%d\n",mp,i);
---
>       fprintf(stderr,"[%d,%d] y1: rc=%d\n",mp,mt,i);
478c598
<       fprintf(stderr,"[%d] y2: rc=%d\n",mp,i);
---
>       fprintf(stderr,"[%d,%d] y2: rc=%d\n",mp,mt,i);
482c602
<   else if (mp<np-1) {
---
>   else if (mm<nn-1) {
495c615
<       fprintf(stderr,"[%d] y1: rc=%d\n",mp,i);
---
>       fprintf(stderr,"[%d,%d] y1: rc=%d\n",mp,mt,i);
504c624
<       fprintf(stderr,"[%d] y2: rc=%d\n",mp,i);
---
>       fprintf(stderr,"[%d,%d] y2: rc=%d\n",mp,mt,i);
513c633
<       fprintf(stderr,"[%d] y3: rc=%d\n",mp,i);
---
>       fprintf(stderr,"[%d,%d] y3: rc=%d\n",mp,mt,i);
525c645
<       fprintf(stderr,"[%d] y1: rc=%d\n",mp,i);
---
>       fprintf(stderr,"[%d,%d] y1: rc=%d\n",mp,mt,i);
534c654
<       fprintf(stderr,"[%d] y3: rc=%d\n",mp,i);
---
>       fprintf(stderr,"[%d,%d] y3: rc=%d\n",mp,mt,i);
553c673,675
<   if (mp==0) {
---
>   #pragma omp barrier
> 
>   if (mm==0) {
563c685
<   else if (mp<np-1) {
---
>   else if (mm<nn-1) {
572c694
<     i = mp * 8 - 4;
---
>     i = mm * 8 - 4;
587c709
<     i = mp * 8 - 4;
---
>     i = mm * 8 - 4;
594,600c716,726
<   if (np<2) {
<     for (i=0; i<ncp; i++) {
<       j = 4*i;
<       aa[i] = dd[j];
<       bb[i] = dd[j+1];
<       cc[i] = dd[j+2];
<       ff[i] = dd[j+3];
---
>   #pragma omp barrier
> 
>   if (mt == 0) {
>     if (np<2) {
>       for (i=0; i<ncp; i++) {
>         j = 4*i;
>         aa[i] = dd[j];
>         bb[i] = dd[j+1];
>         cc[i] = dd[j+2];
>         ff[i] = dd[j+3];
>       }
602,604c728,729
<   }
<   else {
<     MPI_Allreduce(dd,ee,4*ncp,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
---
>     else {
>       MPI_Allreduce(dd,ee,4*ncp,MPI_DOUBLE,MPI_SUM,MPI_COMM_WORLD);
606,611c731,737
<     for (i=0; i<ncp; i++) {
<       j = 4*i;
<       aa[i] = ee[j];
<       bb[i] = ee[j+1];
<       cc[i] = ee[j+2];
<       ff[i] = ee[j+3];
---
>       for (i=0; i<ncp; i++) {
>         j = 4*i;
>         aa[i] = ee[j];
>         bb[i] = ee[j+1];
>         cc[i] = ee[j+2];
>         ff[i] = ee[j+3];
>       }
613d738
<   }
615,618c740,744
<   i = prog_right(ncp,aa,bb,cc,ff,al,y4);
<   if (i!=0) {
<     fprintf(stderr,"[%d] y4: rc=%d\n",mp,i);
<     return i;
---
>     i = prog_right(ncp,aa,bb,cc,ff,al,y4);
>     if (i!=0) {
>       fprintf(stderr,"[%d,%d] y4: rc=%d\n",mp,mt,i);
>       return i;
>     }
621c747,749
<   if (mp==0){
---
>   #pragma omp barrier
> 
>   if (mm==0){
626,628c754,755
<   else if (mp<np-1) {
<     a1 = y4[2*mp-1];
<     b1 = y4[2*mp];
---
>   else if (mm<nn-1) {
>     a1 = y4[2*mm-1]; b1 = y4[2*mm];
633c760
<     a1 = y4[2*mp-1];
---
>     a1 = y4[2*mm-1];
636a764,765
> 
>   #pragma omp barrier
